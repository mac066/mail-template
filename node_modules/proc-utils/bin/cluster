#!/usr/bin/env node

'use strict';

var fs = require('fs');
var util = require('util');
var path = require('path');
var http = require('http');
var recluster = require('recluster');
var args = require('yargs').argv;

var flagReload = true;

function usage() {
    console.log('Usage : ' + process.argv[1] + ' <filename> ');
    console.log('example : cluster app.js');
}

function killAll(signal) {
    util.log(util.format('Received %s signal, signalling all worker processes',
        signal));
    process.kill(0, signal);
}

function heartbeat(cluster) {
    var port = args.p | 0;

    function reloadCluster(msg) {
        if (flagReload) {
            flagReload = false;
            util.log('reloading cluster instances ' + msg);
            cluster.reload();
            setTimeout(function () {
                flagReload = true;
            }, 10000);
        } else {
            util.log('multiple call reload ');
        }
    }

    if (port) {
        process.env.PORT = port;
        util.log('will monitor port ' + port + ' for heartbeat');
        setTimeout(function () {
            setInterval(function () {
                var request = http.get('http://localhost:' + port,
                    handleResponse).on('error', handleError);

                function handleResponse(res) {
                    request.setTimeout(0); // disable timeout on response.
                    if ([200, 302].indexOf(res.statusCode) === -1) {
                        reloadCluster('[heartbeat] : FAIL with code ' +
                            res.statusCode);
                    } else {
                        util.log('[heartbeat]:OK -' + res.statusCode);
                    }
                }

                function handleError(err) {
                    reloadCluster('[heartbeat]: FAIL - ' + err.message);
                }

                request.setTimeout(10000, function () {
                    // This is agressive reload on first failure. We may change it
                    // to reload on n consecutive failures
                    reloadCluster('[heartbeat]: FAIL with timeout ');
                });
            }, 10000);
        }, 20000);
    }
}

function startApp(filename) {

    var opts = {
        timeout: 30,
        respawn: 60,
        args: process.argv
    };

    var cluster = recluster(filename, opts);
    var sighupSent = false;
    var restartFile = process.env.RESTARTFILE || './public/system/restart';

    // this comes first as it may set the port
    heartbeat(cluster);
    cluster.run();

    process.on('SIGHUP', function () {
        if (!sighupSent) {
            sighupSent = true;
            killAll('SIGHUP');
            setTimeout(function () {
                sighupSent = false;
            }, 30000);
        }
    });

    process.on('SIGUSR2', function () {
        util.log('Restart signal received, reloading instances');
        cluster.reload();
    });

    process.on('SIGTERM', function () {
        util.log('TERM signal received, shutting down instances');
        cluster.terminate();
    });

    /**
     * Monitor the specified file for restart. If that file
     * is modified, shut down the current process instance.
     */
    fs.watchFile(restartFile, function (curr, prev) {
        util.log('Restart signal received, reloading instances');
        cluster.reload();
    });
}

// main entry point
if (require.main === module) {
    (function main() {
        var argv = process.argv.slice(2);
        var filename = argv[0];

        if (!argv.length) {
            return usage();
        }

        util.log('starting ' + filename);

        fs.stat(filename, fetchedStats);

        function fetchedStats(err, st) {
            if (!/\.js$/.test(filename)) {
                filename += '.js';
            }

            if (filename[0] !== '/') {
                filename = process.cwd() + '/' + filename;
            }

            startApp(filename);
        }
    })();
}
